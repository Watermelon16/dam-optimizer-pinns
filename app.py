import torch
import torch.nn as nn
import numpy as np
import matplotlib.pyplot as plt
import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from datetime import datetime
import os
import base64
from io import BytesIO
import sqlite3
import threading
from contextlib import contextmanager

# Import c√°c module t√πy ch·ªânh
from pinns_optimizer import optimize_dam_section, create_force_diagram, plot_loss_curve
from database import DamDatabase

# Kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu
@st.cache_resource(ttl=3600)
def get_database():
    db_path = os.path.join(os.path.dirname(__file__), 'data', 'dam_results.db')
    os.makedirs(os.path.dirname(db_path), exist_ok=True)
    db = DamDatabase(db_path)
    db.create_tables()
    return db

# H√†m t·∫°o b√°o c√°o Excel
def create_excel_report(result):
    """
    T·∫°o b√°o c√°o Excel t·ª´ k·∫øt qu·∫£ t√≠nh to√°n
    
    Parameters:
    -----------
    result : dict
        K·∫øt qu·∫£ t√≠nh to√°n t·ª´ h√†m optimize_dam_section
        
    Returns:
    --------
    df : pandas.DataFrame
        DataFrame ch·ª©a d·ªØ li·ªáu b√°o c√°o
    """
    # T·∫°o DataFrame cho b√°o c√°o
    data = {
        'Th√¥ng s·ªë': [
            'Chi·ªÅu cao ƒë·∫≠p (H)',
            'Tr·ªçng l∆∞·ª£ng ri√™ng b√™ t√¥ng (Œ≥_bt)',
            'Tr·ªçng l∆∞·ª£ng ri√™ng n∆∞·ªõc (Œ≥_n)',
            'H·ªá s·ªë ma s√°t (f)',
            'C∆∞·ªùng ƒë·ªô kh√°ng c·∫Øt (C)',
            'H·ªá s·ªë ·ªïn ƒë·ªãnh y√™u c·∫ßu (Kc)',
            'H·ªá s·ªë √°p l·ª±c th·∫•m (a1)',
            'H·ªá s·ªë m√°i th∆∞·ª£ng l∆∞u (n)',
            'H·ªá s·ªë m√°i h·∫° l∆∞u (m)',
            'Tham s·ªë Œæ',
            'Di·ªán t√≠ch m·∫∑t c·∫Øt (A)',
            'H·ªá s·ªë ·ªïn ƒë·ªãnh (K)',
            '·ª®ng su·∫•t m√©p th∆∞·ª£ng l∆∞u (œÉ)',
            'Chi·ªÅu r·ªông ƒë√°y ƒë·∫≠p (B)',
            'Tr·ªçng l∆∞·ª£ng b·∫£n th√¢n ƒë·∫≠p (G)',
            'Tr·ªçng l∆∞·ª£ng ph·∫ßn d·ªëc (G1)',
            'Tr·ªçng l∆∞·ª£ng ph·∫ßn ƒë·ª©ng (G2)',
            '√Åp l·ª±c n∆∞·ªõc th∆∞·ª£ng l∆∞u - tam gi√°c (W1)',
            '√Åp l·ª±c n∆∞·ªõc th∆∞·ª£ng l∆∞u - h√¨nh ch·ªØ nh·∫≠t (W2_1)',
            '√Åp l·ª±c n∆∞·ªõc th∆∞·ª£ng l∆∞u - tam gi√°c (W2_2)',
            'T·ªïng √°p l·ª±c n∆∞·ªõc th∆∞·ª£ng l∆∞u (W2)',
            '√Åp l·ª±c th·∫•m (Wt)',
            'L·ª±c ch·ªëng tr∆∞·ª£t (Fct)',
            'L·ª±c g√¢y tr∆∞·ª£t (Fgt)',
            'ƒê·ªô l·ªách t√¢m (e)',
            'S·ªë v√≤ng l·∫∑p th·ª±c t·∫ø',
            'S·ªë v√≤ng l·∫∑p t·ªëi ƒëa',
            'Th·ªùi gian t√≠nh to√°n'
        ],
        'Gi√° tr·ªã': [
            f"{result['H']:.2f} m",
            f"{result['gamma_bt']:.2f} T/m¬≥",
            f"{result['gamma_n']:.2f} T/m¬≥",
            f"{result['f']:.2f}",
            f"{result['C']:.2f} T/m¬≤",
            f"{result['Kc']:.2f}",
            f"{result['a1']:.2f}",
            f"{result['n']:.4f}",
            f"{result['m']:.4f}",
            f"{result['xi']:.4f}",
            f"{result['A']:.2f} m¬≤",
            f"{result['K']:.4f}",
            f"{result['sigma']:.4f} T/m¬≤",
            f"{result['B']:.2f} m",
            f"{result['G']:.2f} T",
            f"{result['G1']:.2f} T",
            f"{result['G2']:.2f} T",
            f"{result['W1']:.2f} T",
            f"{result['W2_1']:.2f} T",
            f"{result['W2_2']:.2f} T",
            f"{result['W2']:.2f} T",
            f"{result['Wt']:.2f} T",
            f"{result['Fct']:.2f} T",
            f"{result['Fgt']:.2f} T",
            f"{result['e']:.2f} m",
            f"{result['iterations']}",
            f"{result.get('max_iterations', 5000)}",
            f"{result.get('computation_time', 0):.2f} gi√¢y"
        ]
    }
    
    df = pd.DataFrame(data)
    return df

# H√†m t·∫°o link t·∫£i xu·ªëng Excel
def get_excel_download_link(df, filename="bao_cao.xlsx"):
    """
    T·∫°o link t·∫£i xu·ªëng file Excel
    
    Parameters:
    -----------
    df : pandas.DataFrame
        DataFrame ch·ª©a d·ªØ li·ªáu b√°o c√°o
    filename : str
        T√™n file Excel
        
    Returns:
    --------
    href : str
        Link t·∫£i xu·ªëng
    """
    output = BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='B√°o c√°o')
    
    b64 = base64.b64encode(output.getvalue()).decode()
    href = f'<a href="data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{b64}" download="{filename}">T·∫£i xu·ªëng b√°o c√°o Excel</a>'
    return href

# Thi·∫øt l·∫≠p ·ª©ng d·ª•ng Streamlit
st.set_page_config(
    page_title="T√≠nh to√°n t·ªëi ∆∞u m·∫∑t c·∫Øt ƒë·∫≠p b√™ t√¥ng",
    page_icon="üèûÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- Kh·ªüi t·∫°o session state m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a c√≥ ---
default_values = {
    'H': 60.0,
    'gamma_bt': 2.4,
    'gamma_n': 1.0,
    'f': 0.7,
    'C': 0.5,
    'Kc': 1.2,
    'a1': 0.6,
    'max_iterations': 5000,
    'convergence_threshold': 1e-6,
    'patience': 50,
    'result': None,
    'show_history': False
}
for key, val in default_values.items():
    if key not in st.session_state:
        st.session_state[key] = val

# CSS t√πy ch·ªânh theo phong c√°ch Apple
st.markdown("""
<style>
    /* Ph√¥ng ch·ªØ v√† m√†u s·∫Øc */
    body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
        color: #333333;
        background-color: #ffffff;
    }
    
    /* Ti√™u ƒë·ªÅ */
    h1, h2, h3 {
        font-weight: 500;
        color: #000000;
    }
    
    /* N√∫t */
    .stButton > button {
        background-color: #0066cc;
        color: white;
        border-radius: 8px;
        border: none;
        padding: 0.5rem 1rem;
        font-weight: 500;
    }
    
    .stButton > button:hover {
        background-color: #0055aa;
    }
    
    /* Tabs */
    .stTabs [data-baseweb="tab-list"] {
        gap: 2px;
    }
    
    .stTabs [data-baseweb="tab"] {
        height: 50px;
        white-space: pre-wrap;
        background-color: #f5f5f7;
        border-radius: 4px 4px 0px 0px;
        gap: 1px;
        padding-top: 10px;
        padding-bottom: 10px;
    }
    
    .stTabs [aria-selected="true"] {
        background-color: #0066cc;
        color: white;
    }
    
    /* Form */
    .stForm {
        background-color: #f5f5f7;
        padding: 20px;
        border-radius: 10px;
    }
    
    /* Th·∫ª th√¥ng tin */
    .stAlert {
        border-radius: 8px;
    }
    
    /* Footer */
    .footer {
        position: relative;
        bottom: 0;
        left: 0;
        right: 0;
        text-align: center;
        padding: 10px;
        font-size: 0.8rem;
        color: #666666;
        margin-top: 50px;
    }
    
    /* Metric */
    [data-testid="stMetricValue"] {
        font-size: 1.5rem;
        font-weight: 500;
        color: #0066cc;
    }
    
    /* Th·∫ª th√†nh c√¥ng */
    .stSuccess {
        background-color: #e8f5e9;
        border-left-color: #4caf50;
    }
    
    /* Th·∫ª c·∫£nh b√°o */
    .stWarning {
        background-color: #fff8e1;
        border-left-color: #ff9800;
    }
    
    /* Th·∫ª l·ªói */
    .stError {
        background-color: #ffebee;
        border-left-color: #f44336;
    }
</style>
""", unsafe_allow_html=True)

# Ti√™u ƒë·ªÅ ·ª©ng d·ª•ng
st.title("C√¥ng c·ª• t√≠nh to√°n t·ªëi ∆∞u m·∫∑t c·∫Øt ƒë·∫≠p b√™ t√¥ng tr·ªçng l·ª±c")
st.markdown("S·ª≠ d·ª•ng m√¥ h√¨nh Physics-Informed Neural Networks (PINNs)")

# T·∫°o tabs
tabs = st.tabs(["T√≠nh to√°n", "L·ªãch s·ª≠ t√≠nh to√°n", "L√Ω thuy·∫øt", "Gi·ªõi thi·ªáu"])

# Tab T√≠nh to√°n
with tabs[0]:
    # Chia layout th√†nh 2 c·ªôt
    col1, col2 = st.columns([1, 2])
    
    with col1:
        st.markdown("### Th√¥ng s·ªë ƒë·∫ßu v√†o")
        
        # Form nh·∫≠p li·ªáu
        with st.form("input_form"):
            H = st.number_input("Chi·ªÅu cao ƒë·∫≠p H (m)", min_value=10.0, max_value=300.0, value=st.session_state.H, step=5.0)
            
            st.markdown("#### Th√¥ng s·ªë v·∫≠t li·ªáu v√† n·ªÅn")
            gamma_bt = st.number_input("Tr·ªçng l∆∞·ª£ng ri√™ng b√™ t√¥ng Œ≥_bt (T/m¬≥)", min_value=2.0, max_value=3.0, value=st.session_state.gamma_bt, step=0.1)
            gamma_n = st.number_input("Tr·ªçng l∆∞·ª£ng ri√™ng n∆∞·ªõc Œ≥_n (T/m¬≥)", min_value=0.9, max_value=1.1, value=st.session_state.gamma_n, step=0.1)
            f = st.number_input("H·ªá s·ªë ma s√°t f", min_value=0.3, max_value=0.9, value=st.session_state.f, step=0.05)
            C = st.number_input("C∆∞·ªùng ƒë·ªô kh√°ng c·∫Øt C (T/m¬≤)", min_value=0.0, max_value=10.0, value=st.session_state.C, step=0.1)
            
            st.markdown("#### Th√¥ng s·ªë ·ªïn ƒë·ªãnh v√† th·∫•m")
            Kc = st.number_input("H·ªá s·ªë ·ªïn ƒë·ªãnh y√™u c·∫ßu Kc", min_value=1.0, max_value=2.0, value=st.session_state.Kc, step=0.1)
            a1 = st.number_input("H·ªá s·ªë √°p l·ª±c th·∫•m Œ±1", min_value=0.0, max_value=1.0, value=st.session_state.a1, step=0.1)
            
            st.markdown("#### Th√¥ng s·ªë t√≠nh to√°n PINNs")
            max_iterations = st.slider("S·ªë v√≤ng l·∫∑p t·ªëi ƒëa", min_value=1000, max_value=10000, value=st.session_state.max_iterations, step=1000)
            
            # Th√¥ng s·ªë h·ªôi t·ª• n√¢ng cao (c√≥ th·ªÉ ·∫©n ƒëi)
            show_advanced = st.checkbox("Hi·ªÉn th·ªã th√¥ng s·ªë n√¢ng cao")
            if show_advanced:
                convergence_threshold = st.number_input(
                    "Ng∆∞·ª°ng h·ªôi t·ª•", 
                    min_value=1e-8, 
                    max_value=1e-4, 
                    value=st.session_state.convergence_threshold, 
                    format="%.1e"
                )
                patience = st.slider(
                    "S·ªë v√≤ng l·∫∑p ki√™n nh·∫´n", 
                    min_value=10, 
                    max_value=200, 
                    value=st.session_state.patience, 
                    step=10,
                    help="S·ªë v√≤ng l·∫∑p ch·ªù ƒë·ª£i khi kh√¥ng c√≥ c·∫£i thi·ªán tr∆∞·ªõc khi d·ª´ng s·ªõm"
                )
            else:
                convergence_threshold = st.session_state.convergence_threshold
                patience = st.session_state.patience
            
            # N√∫t t√≠nh to√°n
            submitted = st.form_submit_button("T√≠nh to√°n t·ªëi ∆∞u")
        
        # N√∫t ƒë·∫∑t l·∫°i
        reset_clicked = st.button("üîÑ ƒê·∫∑t l·∫°i")
        if reset_clicked:
            for k, v in default_values.items():
                st.session_state[k] = v
            st.experimental_rerun()
    
        # X·ª≠ l√Ω khi form ƒë∆∞·ª£c g·ª≠i
        if submitted:
            # C·∫≠p nh·∫≠t session state
            st.session_state.H = H
            st.session_state.gamma_bt = gamma_bt
            st.session_state.gamma_n = gamma_n
            st.session_state.f = f
            st.session_state.C = C
            st.session_state.Kc = Kc
            st.session_state.a1 = a1
            st.session_state.max_iterations = max_iterations
            st.session_state.convergence_threshold = convergence_threshold
            st.session_state.patience = patience
            
            with st.spinner("ƒêang t√≠nh to√°n t·ªëi ∆∞u m·∫∑t c·∫Øt ƒë·∫≠p..."):
                # Ghi l·∫°i th·ªùi gian b·∫Øt ƒë·∫ßu
                start_time = datetime.now()
                
                # Th·ª±c hi·ªán t√≠nh to√°n
                result = optimize_dam_section(
                    H=H,
                    gamma_bt=gamma_bt,
                    gamma_n=gamma_n,
                    f=f,
                    C=C,
                    Kc=Kc,
                    a1=a1,
                    max_iterations=max_iterations,
                    convergence_threshold=convergence_threshold,
                    patience=patience
                )
                
                # T√≠nh th·ªùi gian t√≠nh to√°n
                computation_time = (datetime.now() - start_time).total_seconds()
                result['computation_time'] = computation_time
                
                # L∆∞u k·∫øt qu·∫£ v√†o session state
                st.session_state['result'] = result
                
                try:
                    # L∆∞u k·∫øt qu·∫£ v√†o c∆° s·ªü d·ªØ li·ªáu
                    db = get_database()
                    result_id = db.save_result(result)
                    st.session_state['last_result_id'] = result_id
                    st.success(f"ƒê√£ l∆∞u k·∫øt qu·∫£ t√≠nh to√°n v√†o c∆° s·ªü d·ªØ li·ªáu (ID: {result_id})")
                except Exception as e:
                    st.warning(f"Kh√¥ng th·ªÉ l∆∞u k·∫øt qu·∫£ v√†o c∆° s·ªü d·ªØ li·ªáu: {str(e)}")
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£ n·∫øu c√≥
    with col2:
        if 'result' in st.session_state and st.session_state['result'] is not None:
            result = st.session_state['result']
            
            st.markdown("### K·∫øt qu·∫£ t√≠nh to√°n")
            
            # Hi·ªÉn th·ªã c√°c tham s·ªë t·ªëi ∆∞u
            col_params1, col_params2 = st.columns(2)
            
            with col_params1:
                st.metric("H·ªá s·ªë m√°i th∆∞·ª£ng l∆∞u (n)", f"{result['n']:.4f}")
                st.metric("H·ªá s·ªë m√°i h·∫° l∆∞u (m)", f"{result['m']:.4f}")
                st.metric("Tham s·ªë Œæ", f"{result['xi']:.4f}")
            
            with col_params2:
                st.metric("Di·ªán t√≠ch m·∫∑t c·∫Øt (A)", f"{result['A']:.4f} m¬≤")
                st.metric("H·ªá s·ªë ·ªïn ƒë·ªãnh (K)", f"{result['K']:.4f}")
                st.metric("·ª®ng su·∫•t m√©p th∆∞·ª£ng l∆∞u (œÉ)", f"{result['sigma']:.4f} T/m¬≤")
            
            # Hi·ªÉn th·ªã tr·∫°ng th√°i
            if abs(result['K'] - result['Kc']) < 0.05:  # Sai s·ªë cho ph√©p 5%
                st.success(f"M·∫∑t c·∫Øt ƒë·∫≠p th·ªèa m√£n ƒëi·ªÅu ki·ªán ·ªïn ƒë·ªãnh (K = {result['K']:.4f} ‚âà Kc = {result['Kc']:.2f})")
            elif result['K'] > result['Kc']:
                st.info(f"M·∫∑t c·∫Øt ƒë·∫≠p th·ªèa m√£n ƒëi·ªÅu ki·ªán ·ªïn ƒë·ªãnh (K = {result['K']:.4f} > Kc = {result['Kc']:.2f})")
            else:
                st.error(f"M·∫∑t c·∫Øt ƒë·∫≠p KH√îNG th·ªèa m√£n ƒëi·ªÅu ki·ªán ·ªïn ƒë·ªãnh (K = {result['K']:.4f} < Kc = {result['Kc']:.2f})")
            
            if result['sigma'] <= 0:
                st.success(f"M·∫∑t c·∫Øt ƒë·∫≠p th·ªèa m√£n ƒëi·ªÅu ki·ªán kh√¥ng k√©o (œÉ = {result['sigma']:.4f} T/m¬≤ ‚â§ 0)")
            else:
                st.warning(f"M·∫∑t c·∫Øt ƒë·∫≠p c√≥ ·ª©ng su·∫•t k√©o ·ªü m√©p th∆∞·ª£ng l∆∞u (œÉ = {result['sigma']:.4f} T/m¬≤ > 0)")
            
            # Hi·ªÉn th·ªã th√¥ng tin v·ªÅ s·ªë v√≤ng l·∫∑p
            st.info(f"S·ªë v√≤ng l·∫∑p th·ª±c t·∫ø: {result['iterations']} / {result.get('max_iterations', max_iterations)} (t·ªëi ƒëa)")
            
            # Hi·ªÉn th·ªã th·ªùi gian t√≠nh to√°n
            st.info(f"Th·ªùi gian t√≠nh to√°n: {result['computation_time']:.2f} gi√¢y")
            
            # T·∫°o tabs cho c√°c bi·ªÉu ƒë·ªì
            result_tabs = st.tabs(["M·∫∑t c·∫Øt ƒë·∫≠p", "Bi·ªÉu ƒë·ªì h√†m m·∫•t m√°t", "Xu·∫•t b√°o c√°o"])
            
            # Tab m·∫∑t c·∫Øt ƒë·∫≠p
            with result_tabs[0]:
                # T·∫°o bi·ªÉu ƒë·ªì Plotly t∆∞∆°ng t√°c
                try:
                    fig = create_force_diagram(result)
                    st.plotly_chart(fig, use_container_width=True)
                except Exception as e:
                    st.error(f"Kh√¥ng th·ªÉ t·∫°o bi·ªÉu ƒë·ªì m·∫∑t c·∫Øt ƒë·∫≠p: {str(e)}")
            
            # Tab bi·ªÉu ƒë·ªì h√†m m·∫•t m√°t
            with result_tabs[1]:
                # T·∫°o bi·ªÉu ƒë·ªì Plotly t∆∞∆°ng t√°c
                try:
                    if 'loss_history' in result and len(result['loss_history']) > 0:
                        loss_fig = plot_loss_curve(result['loss_history'])
                        st.plotly_chart(loss_fig, use_container_width=True)
                    else:
                        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch s·ª≠ h√†m m·∫•t m√°t ƒë·ªÉ hi·ªÉn th·ªã")
                except Exception as e:
                    st.error(f"Kh√¥ng th·ªÉ t·∫°o bi·ªÉu ƒë·ªì h√†m m·∫•t m√°t: {str(e)}")
            
            # Tab xu·∫•t b√°o c√°o
            with result_tabs[2]:
                st.markdown("### Xu·∫•t b√°o c√°o")
                
                # T·∫°o b√°o c√°o Excel
                excel_df = create_excel_report(result)
                
                # Hi·ªÉn th·ªã b√°o c√°o
                st.dataframe(excel_df, use_container_width=True)
                
                # T·∫°o link t·∫£i xu·ªëng
                st.markdown(
                    get_excel_download_link(excel_df, f"bao_cao_dam_H{int(result['H'])}.xlsx"),
                    unsafe_allow_html=True
                )

# Tab L·ªãch s·ª≠ t√≠nh to√°n
with tabs[1]:
    st.markdown("### L·ªãch s·ª≠ t√≠nh to√°n")
    
    try:
        # L·∫•y d·ªØ li·ªáu t·ª´ c∆° s·ªü d·ªØ li·ªáu
        db = get_database()
        history_df = db.get_all_results()
        
        if len(history_df) > 0:
            # Hi·ªÉn th·ªã b·∫£ng l·ªãch s·ª≠
            st.dataframe(
                history_df[['id', 'timestamp', 'H', 'gamma_bt', 'gamma_n', 'f', 'C', 'Kc', 'a1', 'n', 'm', 'xi', 'A', 'K', 'sigma']],
                use_container_width=True
            )
            
            # Ch·ªçn k·∫øt qu·∫£ ƒë·ªÉ xem chi ti·∫øt
            selected_id = st.selectbox("Ch·ªçn ID ƒë·ªÉ xem chi ti·∫øt:", history_df['id'].tolist())
            
            if st.button("Xem chi ti·∫øt"):
                # L·∫•y k·∫øt qu·∫£ t·ª´ c∆° s·ªü d·ªØ li·ªáu
                selected_result = db.get_result_by_id(selected_id)
                
                if selected_result:
                    # Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt
                    st.markdown("#### Th√¥ng tin chi ti·∫øt")
                    
                    # T·∫°o DataFrame t·ª´ k·∫øt qu·∫£
                    detail_df = pd.DataFrame({
                        'Th√¥ng s·ªë': [
                            'Chi·ªÅu cao ƒë·∫≠p (H)',
                            'Tr·ªçng l∆∞·ª£ng ri√™ng b√™ t√¥ng (Œ≥_bt)',
                            'Tr·ªçng l∆∞·ª£ng ri√™ng n∆∞·ªõc (Œ≥_n)',
                            'H·ªá s·ªë ma s√°t (f)',
                            'C∆∞·ªùng ƒë·ªô kh√°ng c·∫Øt (C)',
                            'H·ªá s·ªë ·ªïn ƒë·ªãnh y√™u c·∫ßu (Kc)',
                            'H·ªá s·ªë √°p l·ª±c th·∫•m (a1)',
                            'H·ªá s·ªë m√°i th∆∞·ª£ng l∆∞u (n)',
                            'H·ªá s·ªë m√°i h·∫° l∆∞u (m)',
                            'Tham s·ªë Œæ',
                            'Di·ªán t√≠ch m·∫∑t c·∫Øt (A)',
                            'H·ªá s·ªë ·ªïn ƒë·ªãnh (K)',
                            '·ª®ng su·∫•t m√©p th∆∞·ª£ng l∆∞u (œÉ)',
                            'S·ªë v√≤ng l·∫∑p th·ª±c t·∫ø',
                            'S·ªë v√≤ng l·∫∑p t·ªëi ƒëa',
                            'Th·ªùi gian t√≠nh to√°n',
                            'Th·ªùi ƒëi·ªÉm t√≠nh to√°n'
                        ],
                        'Gi√° tr·ªã': [
                            f"{selected_result['H']:.2f} m",
                            f"{selected_result['gamma_bt']:.2f} T/m¬≥",
                            f"{selected_result['gamma_n']:.2f} T/m¬≥",
                            f"{selected_result['f']:.2f}",
                            f"{selected_result['C']:.2f} T/m¬≤",
                            f"{selected_result['Kc']:.2f}",
                            f"{selected_result['a1']:.2f}",
                            f"{selected_result['n']:.4f}",
                            f"{selected_result['m']:.4f}",
                            f"{selected_result['xi']:.4f}",
                            f"{selected_result['A']:.2f} m¬≤",
                            f"{selected_result['K']:.4f}",
                            f"{selected_result['sigma']:.4f} T/m¬≤",
                            f"{selected_result['iterations']}",
                            f"{selected_result.get('max_iterations', 5000)}",
                            f"{selected_result.get('computation_time', 0):.2f} gi√¢y",
                            f"{selected_result['timestamp']}"
                        ]
                    })
                    
                    # Hi·ªÉn th·ªã DataFrame
                    st.dataframe(detail_df, use_container_width=True)
                    
                    # T·∫°o link t·∫£i xu·ªëng Excel
                    st.markdown(
                        get_excel_download_link(detail_df, f"bao_cao_dam_id{selected_id}.xlsx"),
                        unsafe_allow_html=True
                    )
                    
                    # N√∫t ƒë·ªÉ t·∫£i k·∫øt qu·∫£ v√†o form t√≠nh to√°n
                    if st.button("T·∫£i th√¥ng s·ªë n√†y v√†o form t√≠nh to√°n"):
                        st.session_state.H = selected_result['H']
                        st.session_state.gamma_bt = selected_result['gamma_bt']
                        st.session_state.gamma_n = selected_result['gamma_n']
                        st.session_state.f = selected_result['f']
                        st.session_state.C = selected_result['C']
                        st.session_state.Kc = selected_result['Kc']
                        st.session_state.a1 = selected_result['a1']
                        st.session_state.max_iterations = selected_result.get('max_iterations', 5000)
                        st.success("ƒê√£ t·∫£i th√¥ng s·ªë v√†o form t√≠nh to√°n. Chuy·ªÉn sang tab 'T√≠nh to√°n' ƒë·ªÉ ti·∫øp t·ª•c.")
        else:
            st.info("Ch∆∞a c√≥ k·∫øt qu·∫£ t√≠nh to√°n n√†o ƒë∆∞·ª£c l∆∞u trong c∆° s·ªü d·ªØ li·ªáu.")
    except Exception as e:
        st.error(f"L·ªói khi truy c·∫≠p c∆° s·ªü d·ªØ li·ªáu: {str(e)}")
        st.info("Vui l√≤ng th·ª±c hi·ªán t√≠nh to√°n m·ªõi ƒë·ªÉ t·∫°o d·ªØ li·ªáu.")

# Tab L√Ω thuy·∫øt
with tabs[2]:
    st.markdown("""
    ### L√Ω thuy·∫øt t√≠nh to√°n m·∫∑t c·∫Øt ƒë·∫≠p b√™ t√¥ng tr·ªçng l·ª±c s·ª≠ d·ª•ng PINNs
    
    #### Physics-Informed Neural Networks (PINNs)
    
    PINNs l√† m·ªôt ph∆∞∆°ng ph√°p k·∫øt h·ª£p gi·ªØa m·∫°ng n∆°-ron h·ªçc s√¢u v√† c√°c r√†ng bu·ªôc v·∫≠t l√Ω. Trong ·ª©ng d·ª•ng n√†y, PINNs ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ t√¨m c√°c tham s·ªë t·ªëi ∆∞u c·ªßa m·∫∑t c·∫Øt ƒë·∫≠p b√™ t√¥ng tr·ªçng l·ª±c, ƒë·∫£m b·∫£o c√°c ƒëi·ªÅu ki·ªán ·ªïn ƒë·ªãnh v√† an to√†n, ƒë·ªìng th·ªùi t·ªëi thi·ªÉu h√≥a di·ªán t√≠ch m·∫∑t c·∫Øt.
    
    #### C√°c tham s·ªë t·ªëi ∆∞u
    
    M·∫∑t c·∫Øt ƒë·∫≠p b√™ t√¥ng tr·ªçng l·ª±c ƒë∆∞·ª£c m√¥ t·∫£ b·ªüi ba tham s·ªë ch√≠nh:
    
    - **n**: H·ªá s·ªë m√°i th∆∞·ª£ng l∆∞u
    - **m**: H·ªá s·ªë m√°i h·∫° l∆∞u
    - **Œæ (xi)**: Tham s·ªë x√°c ƒë·ªãnh v·ªã tr√≠ ƒëi·ªÉm g√£y kh√∫c tr√™n m√°i th∆∞·ª£ng l∆∞u
    
    #### C√°c ƒëi·ªÅu ki·ªán r√†ng bu·ªôc
    
    M·∫∑t c·∫Øt ƒë·∫≠p ph·∫£i th·ªèa m√£n c√°c ƒëi·ªÅu ki·ªán sau:
    
    1. **ƒêi·ªÅu ki·ªán ·ªïn ƒë·ªãnh tr∆∞·ª£t**: H·ªá s·ªë ·ªïn ƒë·ªãnh K = Kc
    2. **ƒêi·ªÅu ki·ªán kh√¥ng k√©o**: ·ª®ng su·∫•t m√©p th∆∞·ª£ng l∆∞u œÉ ‚â§ 0
    3. **T·ªëi thi·ªÉu h√≥a di·ªán t√≠ch m·∫∑t c·∫Øt**: Gi·∫£m thi·ªÉu l∆∞·ª£ng b√™ t√¥ng s·ª≠ d·ª•ng
    
    #### C√¥ng th·ª©c t√≠nh to√°n
    
    C√°c c√¥ng th·ª©c ch√≠nh ƒë∆∞·ª£c s·ª≠ d·ª•ng trong t√≠nh to√°n:
    
    - **Di·ªán t√≠ch m·∫∑t c·∫Øt**: A = 0.5 * H¬≤ * (m + n * (1-Œæ)¬≤)
    - **H·ªá s·ªë ·ªïn ƒë·ªãnh**: K = Fct / Fgt
        - Fct = f * (G + W2 - Wt) + C * H * (m + n * (1-Œæ))
        - Fgt = 0.5 * Œ≥_n * H¬≤
    - **·ª®ng su·∫•t m√©p th∆∞·ª£ng l∆∞u**: œÉ = P / B - 6 * M0 / B¬≤
    
    #### Qu√° tr√¨nh t·ªëi ∆∞u h√≥a
    
    1. Kh·ªüi t·∫°o m·∫°ng n∆°-ron v·ªõi c√°c tham s·ªë ng·∫´u nhi√™n
    2. T√≠nh to√°n c√°c ƒë·∫°i l∆∞·ª£ng v·∫≠t l√Ω (A, K, œÉ) d·ª±a tr√™n ƒë·∫ßu ra c·ªßa m·∫°ng
    3. T√≠nh to√°n h√†m m·∫•t m√°t d·ª±a tr√™n c√°c r√†ng bu·ªôc v·∫≠t l√Ω
    4. C·∫≠p nh·∫≠t tr·ªçng s·ªë m·∫°ng theo h∆∞·ªõng gi·∫£m gradient c·ªßa h√†m m·∫•t m√°t
    5. L·∫∑p l·∫°i qu√° tr√¨nh cho ƒë·∫øn khi h·ªôi t·ª•
    
    #### H√†m m·∫•t m√°t
    
    H√†m m·∫•t m√°t bao g·ªìm c√°c th√†nh ph·∫ßn:
    
    1. Ph·∫°t n·∫øu K kh√°c Kc (ƒë·∫£m b·∫£o ·ªïn ƒë·ªãnh ch√≠nh x√°c)
    2. Ph·∫°t n·∫øu œÉ > 0 (ƒë·∫£m b·∫£o kh√¥ng k√©o)
    3. T·ªëi thi·ªÉu h√≥a di·ªán t√≠ch A
    
    #### C∆° ch·∫ø h·ªôi t·ª• s·ªõm
    
    ·ª®ng d·ª•ng s·ª≠ d·ª•ng c∆° ch·∫ø h·ªôi t·ª• s·ªõm ƒë·ªÉ t·ªëi ∆∞u h√≥a qu√° tr√¨nh t√≠nh to√°n:
    
    1. **Ng∆∞·ª°ng h·ªôi t·ª•**: D·ª´ng khi s·ª± thay ƒë·ªïi c·ªßa h√†m m·∫•t m√°t nh·ªè h∆°n ng∆∞·ª°ng
    2. **Ki√™n nh·∫´n**: D·ª´ng khi kh√¥ng c√≥ c·∫£i thi·ªán sau m·ªôt s·ªë v√≤ng l·∫∑p nh·∫•t ƒë·ªãnh
    3. **ƒêi·ªÅu ch·ªânh learning rate**: Gi·∫£m learning rate khi h√†m m·∫•t m√°t kh√¥ng gi·∫£m
    
    C∆° ch·∫ø n√†y gi√∫p gi·∫£m th·ªùi gian t√≠nh to√°n v√† tr√°nh overfitting, ƒë·ªìng th·ªùi v·∫´n ƒë·∫£m b·∫£o t√¨m ƒë∆∞·ª£c gi·∫£i ph√°p t·ªëi ∆∞u.
    """)

# Tab Gi·ªõi thi·ªáu
with tabs[3]:
    st.markdown("""
    ### Gi·ªõi thi·ªáu v·ªÅ ·ª©ng d·ª•ng
    
    ·ª®ng d·ª•ng n√†y s·ª≠ d·ª•ng m√¥ h√¨nh Physics-Informed Neural Networks (PINNs) ƒë·ªÉ t√≠nh to√°n m·∫∑t c·∫Øt kinh t·∫ø ƒë·∫≠p b√™ t√¥ng tr·ªçng l·ª±c th·ªèa m√£n c√°c ƒëi·ªÅu ki·ªán ·ªïn ƒë·ªãnh v√† an to√†n.
    
    #### T√≠nh nƒÉng ch√≠nh
    
    - **T·ªëi ∆∞u h√≥a m·∫∑t c·∫Øt**: T√¨m b·ªô 3 th√¥ng s·ªë (n, m, Œæ) t·ªëi ∆∞u th·ªèa m√£n c√°c ƒëi·ªÅu ki·ªán
    - **Tr·ª±c quan h√≥a**: Hi·ªÉn th·ªã s∆° ƒë·ªì m·∫∑t c·∫Øt ƒë·∫≠p v√† bi·ªÉu ƒë·ªì h√†m m·∫•t m√°t
    - **L∆∞u tr·ªØ k·∫øt qu·∫£**: L∆∞u v√† truy xu·∫•t c√°c k·∫øt qu·∫£ t√≠nh to√°n
    - **Xu·∫•t b√°o c√°o**: T·∫°o b√°o c√°o Excel v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin
    
    #### ∆Øu ƒëi·ªÉm c·ªßa ph∆∞∆°ng ph√°p PINNs
    
    - **T·ª± ƒë·ªông t·ªëi ∆∞u h√≥a**: Kh√¥ng c·∫ßn th·ª≠ nghi·ªám th·ªß c√¥ng nhi·ªÅu ph∆∞∆°ng √°n
    - **K·∫øt h·ª£p v·∫≠t l√Ω v√† h·ªçc m√°y**: ƒê·∫£m b·∫£o k·∫øt qu·∫£ th·ªèa m√£n c√°c ƒë·ªãnh lu·∫≠t v·∫≠t l√Ω
    - **H·ªôi t·ª• nhanh**: C∆° ch·∫ø h·ªôi t·ª• s·ªõm gi√∫p gi·∫£m th·ªùi gian t√≠nh to√°n
    - **Ch√≠nh x√°c cao**: T√¨m ƒë∆∞·ª£c m·∫∑t c·∫Øt t·ªëi ∆∞u th·ªèa m√£n ch√≠nh x√°c c√°c ƒëi·ªÅu ki·ªán
    
    #### H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
    
    1. Nh·∫≠p c√°c th√¥ng s·ªë ƒë·∫ßu v√†o ·ªü tab "T√≠nh to√°n"
    2. Nh·∫•n n√∫t "T√≠nh to√°n t·ªëi ∆∞u" ƒë·ªÉ b·∫Øt ƒë·∫ßu qu√° tr√¨nh t·ªëi ∆∞u h√≥a
    3. Xem k·∫øt qu·∫£ v√† bi·ªÉu ƒë·ªì tr·ª±c quan
    4. T·∫£i xu·ªëng b√°o c√°o Excel n·∫øu c·∫ßn
    5. Xem l·ªãch s·ª≠ t√≠nh to√°n ·ªü tab "L·ªãch s·ª≠ t√≠nh to√°n"
    
    #### L∆∞u √Ω
    
    - Qu√° tr√¨nh t·ªëi ∆∞u h√≥a c√≥ th·ªÉ m·∫•t t·ª´ v√†i gi√¢y ƒë·∫øn v√†i ph√∫t t√πy thu·ªôc v√†o th√¥ng s·ªë ƒë·∫ßu v√†o
    - S·ªë v√≤ng l·∫∑p t·ªëi ƒëa c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh ƒë·ªÉ c√¢n b·∫±ng gi·ªØa th·ªùi gian t√≠nh to√°n v√† ƒë·ªô ch√≠nh x√°c
    - C∆° ch·∫ø h·ªôi t·ª• s·ªõm s·∫Ω t·ª± ƒë·ªông d·ª´ng qu√° tr√¨nh khi ƒë√£ t√¨m ƒë∆∞·ª£c gi·∫£i ph√°p t·ªëi ∆∞u
    """)

# Footer
st.markdown("""
<div class="footer">
    <p>·ª®ng d·ª•ng t√≠nh to√°n t·ªëi ∆∞u m·∫∑t c·∫Øt ƒë·∫≠p b√™ t√¥ng tr·ªçng l·ª±c s·ª≠ d·ª•ng PINNs</p>
</div>
""", unsafe_allow_html=True)
